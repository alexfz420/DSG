<object-stream>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>4</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ObjectLogEvent>
  <type>2</type>
  <factId>1</factId>
  <objectToString>[Kobe3]</objectToString>
</org.drools.core.audit.event.ObjectLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>for not splitable packages [1]</activationId>
  <rule>for not splitable packages</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>7</type>
  <activationId>generate test results [8, 1, 9]</activationId>
  <rule>generate test results</rule>
  <declarations>$stores=[](9); $test=Package test: [[Parcel: [Kobe3 (1) ]]](8); $pack=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
<org.drools.core.audit.event.ActivationLogEvent>
  <type>6</type>
  <activationId>get to evaluate [1]</activationId>
  <rule>get to evaluate</rule>
  <declarations>$p=[Kobe3](1)</declarations>
</org.drools.core.audit.event.ActivationLogEvent>
</object-stream>
