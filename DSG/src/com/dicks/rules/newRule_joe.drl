//created on: Jul 4, 2013
package com.dicks.rules;

//list any import classes here.
import com.dicks.pojo.Orders
import com.dicks.pojo.Product
import com.dicks.pojo.Store
import com.dicks.dao.InventoryDAO
import com.dicks.dao.OrderDetailDAO
import com.dicks.dao.ShipmentDAO
import com.dicks.engine.PackageE
import com.dicks.engine.OrderE
import com.dicks.engine.Parcel
import com.dicks.engine.Util
import com.dicks.engine.ParcelResult
import com.dicks.engine.PackageTest
import com.dicks.engine.PackageTestResult
import com.dicks.engine.EngineLog
import java.util.ArrayList
import java.*;
import java.String.*;
import java.util.HashMap;
import com.dicks.dao.InventoryDAO;
rule "Explore Cart"
    agenda-group "init"
    auto-focus true
    salience 1000
    dialect "java"
    when
        $order : Orders()
        $item : Product() from OrderDetailDAO.getInstance().getProductsByOrder($order)
    then
        insert( $item );
        System.out.println("product"+$item.getSku());
//        modify ($order) { setExploredItem($order.getExploredItem() + 1); }
//        System.out.println("order quantity: " + $order.getQuantity());
//        System.out.println("exlored: " + $order.getExploredItem());
       
end

rule "Default Filter Stock"
	salience 950
	//agenda-group "first"
    when    	
    	$order : Orders()
    	$store : Store()
    	eval(!InventoryDAO.getInstance().containAnyProductOrder($store, $order))
    	$logger : EngineLog()
    then
    	$logger.addLog("Default Filter Stock", "store "+$store.getStoreId()+ " retracted by rule filter stock2");
    	
    	System.out.println("store "+ $store.getStoreId()+ " retracted by rule filter stock");
        retract($store);
end

rule  "Default Default Minimum Package Threshold"
	salience 900
	//agenda-group "first6"
    when
        $o : Orders()
        $orderE : OrderE()
		$i : Product( ((weight > 1000)|| ( length > 10) || (width > 10) || (height >10)))
		 $logger : EngineLog()
    then     
    	
    	for (int i = 0 ; i <$orderE.getProductQty($i.getProdId());i++)
        {
            $logger.addLog("Default Minimum Package Threshold","Product #"+i+" "+$i.getProdName()+"is moved into a separate package");
            System.out.println("Product #"+i+" "+$i.getProdName()+"is moved into a separate package");
            PackageE p = new PackageE($o);
            p.addProduct($i,1);
            insert (p);
            $i.minPackage();
            $logger.addLog("Default Minimum Package Threshold",p.toString()); 
        }
        retract($i);
end

rule  "Special Route for TYR"
    salience 846
    when
        $order : Orders()
        $orderE : OrderE()
        $product : Product($id: prodId, sku.equals("TY-OD-WS"))
        eval ($orderE.getProductQty($id)>0)
        $s : Store( storeName.equals("TYR warehouse"))
        eval(InventoryDAO.getInstance().checkProduct($s, $product, ">", $orderE.getProductQty($id)))
        $logger: EngineLog()
    then
        $logger.addLog("Special Route for TYR","special routes for product "+$product.getProdName()+" with quantity "+$orderE.getProductQty($id)+" is successfully allocated");
        System.out.println("special routes for product "+$product.getProdName()+" with quantity "+$orderE.getProductQty($id)+" is successfully allocated");
        PackageE p = new PackageE($order);
        p.addProduct($product, $orderE.getProductQty($id));
        insert (p);
        p.setAllocated(true); 
        Parcel parcel = new Parcel(p);
        parcel.addNumProduct($product, $orderE.getProductQty($id));
        PackageTest test = new PackageTest(p);
        test.addParcel(parcel);
        ParcelResult parcelR = new ParcelResult(parcel);
        parcelR.setSource($s);
        parcelR.calculateCosts();
        Util.calculateAttribute(parcelR);
        PackageTestResult packageR = new PackageTestResult(test);
         packageR.addResult(parcelR);
        packageR.calculate();
        p.addTop(packageR);
        p.setSpecial(true);
        p.setSource($s);
        $logger.addLog("Special Route for TYR",$product + "get inserted into a new package by speical route rule");
        $logger.addLog("Special Route for TYR",packageR.toString());      
        System.out.println(packageR);
        insert(packageR);
        retract($product);
end

rule  "Threshold for mask"
    salience 844
    when
        $o : Orders()
        $orderE : OrderE()
        $i : Product( ((Length > 3)||( Width > 3)||( Height > 3)||( Weight > 3))&& (( sku.equals("AQ-OD-MA")))&& (flag.equals("TH-A,ST-A,SP-A")))
        $logger: EngineLog()
    then
        for (int i = 0 ; i <$orderE.getProductQty($i.getProdId());i++)
        {
            $logger.addLog("Threshold for mask","Product #"+i+" "+$i.getProdName()+"is moved into a separate package");
            System.out.println("Product #"+i+" "+$i.getProdName()+"is moved into a separate package");
            PackageE p = new PackageE($o);
            p.addProduct($i,1);
            insert (p);
            $i.minPackage();
            $logger.addLog("Threshold for mask",p.toString()); 
        }
        retract($i);
end

rule "Insert Package for Remaining Products"
	salience -5
	//agenda-group "first7"
	when
		$i : Product()
		$o : Orders()
		not PackageE(isForRemain())
	then
		PackageE p = new PackageE($o);
		p.setForRemain(true);
		insert (p);
		System.out.println("insert new package");
//		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();
//		System.out.println("set to next group");
end

rule "Wrap up Remaining Products"
	salience -10
	//agenda-group "first8"
	when
		$i : Product()
		$p : PackageE(isForRemain())
		$orderE : OrderE()
	then
		$p.addProduct($i, $orderE.getProductQty($i.getProdId()));
		retract($i);
		drools.getKnowledgeRuntime().getAgenda().getAgendaGroup( "split" ).setFocus();
end

